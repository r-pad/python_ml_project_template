#!/bin/bash
# shellcheck disable=SC2206
# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS A TEMPLATE AND IT SHOULD NOT BE DEPLOYED TO PRODUCTION!
${PARTITION_OPTION}
#SBATCH --job-name={JOB_NAME}
#SBATCH --output=./.slurm_logs/${JOB_NAME}.log
${GIVEN_NODE}
### This script works for any number of nodes, Ray will find and manage all resources
#SBATCH --nodes=${NUM_NODES}
#SBATCH --exclusive
### Give all resources to a single Ray task, ray can manage the resources internally
#SBATCH --ntasks-per-node=1
### Currently we're overriding the number of GPUs per node in the exec below. This is a hack.
### Normally, we would set this to the number of GPUs per node, esp. if we have a cluster
### with homogeneous nodes.
#           #SBATCH --gres=gpu:${NUM_GPUS_PER_NODE}
#SBATCH --gres=gpu:1
### Exclude the following nodes
#   # SBATCH --exclude=compute-0-19,compute-0-21,compute-0-23,compute-0-25,compute-0-27

# Load modules or your own conda environment here
# module load pytorch/v1.4.0-gpu
# conda activate ${CONDA_ENV}
${LOAD_ENV}

module load singularity

#############################################################
# Modifications to the original script start here.
#############################################################

dockerhub_username=beisner
project_name=python_ml_project_template
scs_username=baeisner

# Get the branch name.
root_dir=$HOME/code/${project_name}

# Compute a good tag for the image, which will be <dockerhub_username>/<project_name>:<branch-name>-scratch.
sanitized_branch_name=$(${root_dir}/cluster/sanitize_branch_name.bash)

# Get the SIF name
sif_name=$HOME/singularity_images/${project_name}_${sanitized_branch_name}-scratch.sif

if [ ! -f ${sif_name} ]; then
  echo "SIF file not found: ${sif_name}"
  echo "You need to run the ./cluster/build_push_sif_seuss.bash script first."
fi

echo "Using SIF name: ${sif_name}"

# ===== DO NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING =====
# This script is a modification to the implementation suggest by gregSchwartz18 here:
# https://github.com/ray-project/ray/issues/826#issuecomment-522116599
redis_password=$(uuidgen)
export redis_password

nodes=$(scontrol show hostnames "$SLURM_JOB_NODELIST") # Getting the node names
nodes_array=($nodes)

node_1=${nodes_array[0]}
ip=$(srun --nodes=1 --ntasks=1 -w "$node_1" hostname --ip-address) # making redis-address

# if we detect a space character in the head node IP, we'll
# convert it to an ipv4 address. This step is optional.
if [[ "$ip" == *" "* ]]; then
  IFS=' ' read -ra ADDR <<<"$ip"
  if [[ ${#ADDR[0]} -gt 16 ]]; then
    ip=${ADDR[1]}
  else
    ip=${ADDR[0]}
  fi
  echo "IPV6 address detected. We split the IPV4 address as $ip"
fi

port=6379
ip_head=$ip:$port
export ip_head
echo "IP Head: $ip_head"

export RAY_num_server_call_thread=2

echo "STARTING HEAD at $node_1"

num_gpus=$(scontrol show node $node_1 | grep CfgTRES | awk -F'gpu=' '{print $2}' | awk '{print $1}')
cuda_devices=$(seq -s, 0 $(($num_gpus - 1)))
echo "CUDA_VISIBLE_DEVICES: $cuda_devices"

# Original.
# srun --nodes=1 --ntasks=1 -w "$node_1" \
#   bash -c "CUDA_VISIBLE_DEVICES=$cuda_devices ray start --head --node-ip-address="$ip" --port=$port --redis-password="$redis_password" --block --num-gpus=$num_gpus" &

# With singularity. Quite hacky that we have to use bash here.
srun --nodes=1 --ntasks=1 -w "$node_1" \
  bash -c "CUDA_VISIBLE_DEVICES=$cuda_devices singularity exec \
  -B $root_dir:/opt/rpad/code \
  --pwd /opt/rpad/code \
  --nv ${sif_name} \
  ray start --head --node-ip-address="$ip" --port=$port --redis-password="$redis_password" --block --num-gpus=$num_gpus" &

sleep 10

worker_num=$((SLURM_JOB_NUM_NODES - 1)) #number of nodes other than the head node
for ((i = 1; i <= worker_num; i++)); do
  node_i=${nodes_array[$i]}
  echo "STARTING WORKER $i at $node_i"

  # Get the number of GPUs on the node.
  num_gpus=$(scontrol show node $node_i | grep CfgTRES | awk -F'gpu=' '{print $2}' | awk '{print $1}')
  echo "NUM_GPUS: $num_gpus"

  # Set CUDA_VISIBLE_DEVICES for each worker
  cuda_devices=$(seq -s, 0 $(($num_gpus - 1)))
  echo "CUDA_VISIBLE_DEVICES: $cuda_devices"
  # srun --nodes=1 --ntasks=1 -w "$node_i" ray start --address "$ip_head" --redis-password="$redis_password" --block &

  srun --nodes=1 --ntasks=1 -w "$node_i" \
    bash -c "CUDA_VISIBLE_DEVICES=$cuda_devices singularity exec \
    -B $root_dir:/opt/rpad/code \
    --pwd /opt/rpad/code \
    --nv ${sif_name} \
    ray start --address "$ip_head" --redis-password="$redis_password" --block --num-gpus=$num_gpus" &
  sleep 5
done

echo "RUNNING YOUR CODE NOW: ${COMMAND_PLACEHOLDER}"

# Print a command to run SSH tunnel to access Ray Dashboard
# Should look like this but fill in with whoami and ip:
# ssh -J baeisner@seuss.ri.cmu.edu -L 8265:localhost:8265 baeisner@10.1.2.249
echo "To access the Ray Dashboard, run the following command on your local machine:"
echo "ssh -J $(whoami)@seuss.ri.cmu.edu -L 8265:localhost:8265 $(whoami)@${ip}"
echo "Then open a browser and go to http://localhost:8265"

# ===== Call your code below =====
singularity exec \
  -B $root_dir:/opt/rpad/code \
  --pwd /opt/rpad/code \
  --nv \
  ${sif_name} \
  ${COMMAND_PLACEHOLDER}
